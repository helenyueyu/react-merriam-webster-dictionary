{"version":3,"sources":["logo2.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","dictionary","thesaurus","API_KEY","App","state","dictionary_word","thesaurus_word","def","syn","onChangeDictionary","e","_this","setState","target","value","onChangeThesaurus","onSubmitDictionary","preventDefault","fetch","concat","then","data","json","shortdef","onSubmitThesaurus","meta","syns","h1Style","fontFamily","react_default","a","createElement","Container","style","padding","background","height","src","logo","alt","width","color","Form","onSubmit","this","Group","Label","border","outline","onChange","Button","borderRadius","type","map","x","idx","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.212b1146.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.e3e9411b.png\";","import React, { Component } from 'react';\nimport { Container, Form, Label, Button } from 'semantic-ui-react'\n\nimport './App.css'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport logo from './logo2.png'\n\nlet dictionary = 'collegiate'\nlet thesaurus = 'thesaurus'\nconst API_KEY = 'a0e1158e-1888-4f7c-ac9b-fe99060d5011'\n\nclass App extends Component {\n  state = {\n    dictionary_word: null,\n    thesaurus_word: null,\n    def: null,\n    syn: null\n  }\n  onChangeDictionary = (e) => {\n    this.setState({\n      dictionary_word: e.target.value\n    })\n  }\n  onChangeThesaurus = (e) => {\n    this.setState({\n      thesaurus_word: e.target.value\n    })\n  }\n  onSubmitDictionary = (e) => {\n    e.preventDefault()\n    fetch(`https://www.dictionaryapi.com/api/v3/references/${dictionary}/json/${this.state.dictionary_word}?key=${API_KEY}`)\n      .then(data => data.json())\n      .then(data => this.setState({\n        def: data[0].shortdef,\n        syn: null\n      }))\n  }\n  onSubmitThesaurus = (e) => {\n    e.preventDefault()\n    fetch(`https://www.dictionaryapi.com/api/v3/references/${thesaurus}/json/${this.state.dictionary_word}?key=${API_KEY}`)\n      .then(data => data.json())\n      .then(data => this.setState({\n        def: null,\n        syn: data[0].meta.syns\n      }))\n  }\n\n  render() {\n    const containerStyle = {\n      padding: '5rem',\n      background: '#004990',\n      height: '100vh'\n    }\n    const labelStyleDictionary = {\n      color: '#D71920',\n      background: 'white',\n      border: '1px solid #D71920'\n    }\n    const labelStyleThesaurus = {\n      color: '#004990',\n      background: 'white',\n      border: '1px solid #004990'\n    }\n    const buttonStyleDictionary = {\n      background: '#D71920',\n      borderRadius: '10px',\n      color: 'white'\n    }\n    const buttonStyleThesaurus = {\n      background: '#004990',\n      borderRadius: '10px',\n      border: '1px solid white',\n      color: 'white'\n    }\n    const h1Style = {\n      fontFamily: 'Open Sans'\n    }\n    const inputStyle = {\n      outline: 'none',\n      padding: '0rem !important'\n    }\n    return (\n      <Container style={containerStyle}>\n      <img src={logo} alt=\"MW Logo\" width='125px'/>\n\n      <p style={{color: 'white'}}>\n        Note: This app uses the <em>Merriam-Webster's CollegiateÂ®</em> dictionary, as well as the <em>Merriam-Webster thesaurus</em>.\n      </p>\n\n      <Form onSubmit={this.onSubmitDictionary}>\n        <Form.Group>\n        <Label style={labelStyleDictionary}><h1 style={h1Style}>Dictionary</h1></Label>\n        <input style={inputStyle} onChange={this.onChangeDictionary}/>\n        <Button style={buttonStyleDictionary} type=\"submit\">search</Button>\n        </Form.Group>\n      </Form>\n      <Form onSubmit={this.onSubmitThesaurus}>\n        <Form.Group>\n        <Label style={labelStyleThesaurus}><h1 style={h1Style}>Thesaurus</h1></Label>\n        <input onChange={this.onChangeThesaurus}/>\n        <Button style={buttonStyleThesaurus} type=\"submit\">search</Button>\n        </Form.Group>\n      </Form>\n      <div style={{color: 'white'}}>\n          {this.state.def && this.state.def.map((x, idx) => <li key={idx}>{idx+1}) {x}</li>)}\n      </div>\n      <div style={{color: 'white'}}>\n          {this.state.syn && this.state.syn}\n      </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}